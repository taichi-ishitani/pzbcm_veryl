import  pzbcm_arbiter_pkg::*;

pub module pzbcm_arbiter_core #(
  param REQUESTS:         u32                           = 2,
  param ONEHOT_GRANT:     bit                           = 1,
  param ENABLE_ARBITER:   bit<2>                        = '1,
  param PRIORITY_WIDTH:   u32                           = 0,
  param WEIGHT_WIDTH:     u32                           = 0,
  param WEIGHT:           pzbcm_arbiter_weight_list     = '1,
  param PRIORITY_MATRIX:  pzbcm_arbiter_priority_matrix = '1,
  param KEEP_RESULT:      bit                           = 1,
  param GRANT_WIDTH:      u32                           = calc_grant_width(REQUESTS, ONEHOT_GRANT)
)(
  i_clk:      input   logic,
  i_rst_n:    input   logic,
  i_config:   input   pzbcm_arbiter_config,
  i_request:  input   logic<REQUESTS>,
  o_grant:    output  logic<GRANT_WIDTH>,
  i_free:     input   logic<REQUESTS>
) {
  var arbiter_config:     pzbcm_arbiter_config;
  var select_round_robin: logic;
  var busy:               logic;
  var grant_round_robin:  logic<GRANT_WIDTH>;
  var grant_matrix:       logic<GRANT_WIDTH>;
  var grant:              logic<2, GRANT_WIDTH>;

  always_comb {
    arbiter_config  = i_config;
  }

//--------------------------------------------------------------
//  Arbiters
//--------------------------------------------------------------
  if ENABLE_ARBITER[0] : g_round_robin {
    var enable: logic;

    always_comb {
      select_round_robin  =
        inside arbiter_config.arbiter_type {
          pzbcm_arbiter_type::FIXED_PRIORITY,
          pzbcm_arbiter_type::ROUND_ROBIN
        };
      enable  = (!busy) && select_round_robin;
    }

    inst u_arbiter: pzbcm_round_robin_arbiter #(
      REQUESTS:       REQUESTS,
      PRIORITY_WIDTH: PRIORITY_WIDTH,
      WEIGHT_WIDTH:   WEIGHT_WIDTH,
      WEIGHT:         WEIGHT,
      ONEHOT_GRANT:   ONEHOT_GRANT,
      GRANT_WIDTH:    GRANT_WIDTH
    )(
      i_clk:      i_clk,
      i_rst_n:    i_rst_n,
      i_enable:   enable,
      i_config:   arbiter_config,
      i_request:  i_request,
      o_grant:    grant_round_robin
    );
  } else {
    always_comb {
      select_round_robin  = '0;
      grant_round_robin   = 0 as GRANT_WIDTH;
    }
  }

  if ENABLE_ARBITER[1] : g_matrix {
    var enable: logic;

    always_comb {
     enable = (!busy) && (!select_round_robin);
    }

    inst u_arbiter: pzbcm_matrix_arbiter #(
      REQUESTS:         REQUESTS,
      PRIORITY_MATRIX:  PRIORITY_MATRIX,
      ONEHOT_GRANT:     ONEHOT_GRANT,
      GRANT_WIDTH:      GRANT_WIDTH
    )(
      i_clk:      i_clk,
      i_rst_n:    i_rst_n,
      i_enable:   enable,
      i_config:   arbiter_config,
      i_request:  i_request,
      o_grant:    grant_matrix
    );
  } else {
    always_comb {
      grant_matrix  = 0 as GRANT_WIDTH;
    }
  }

//--------------------------------------------------------------
//  Grant
//--------------------------------------------------------------
  always_comb {
    o_grant = grant[1];
  }

  always_comb {
    grant[0]  =
      if select_round_robin {
        grant_round_robin
      } else {
        grant_matrix
      };
  }

  if KEEP_RESULT : g_result {
    var update_grant:   logic;
    var grant_latched:  logic<GRANT_WIDTH>;
    var free:           logic;

    always_comb {
      update_grant  = (i_request != '0) && (!busy);
      grant[1]      = if update_grant { grant[0] } else { grant_latched };
    }

    always_comb {
      free  =
        if ONEHOT_GRANT {
          (i_free & (grant[1] as REQUESTS)) != '0
        } else {
          i_free[grant[1]]
        };
    }

    always_ff (i_clk, i_rst_n) {
      if_reset {
        busy  = '0;
      } else if free {
        busy  = '0;
      } else if update_grant {
        busy  = '1;
      }
    }

    always_ff (i_clk, i_rst_n) {
      if_reset {
        grant_latched = 0 as GRANT_WIDTH;
      } else if update_grant {
        grant_latched = grant[0];
      }
    }
  } else {
    always_comb {
      busy      = '0;
      grant[1]  = grant[0];
    }
  }
}
