pub module pzbcm_ram #(
  parameter WORD_SIZE:      u32       = 8,
  parameter ADDRESS_WIDTH:  u32       = if WORD_SIZE >: 1 { $clog2(WORD_SIZE) } else { 1 },
  parameter DATA_WIDTH:     u32       = 8,
  parameter DATA_TYPE:      type      = logic<DATA_WIDTH>,
  parameter BUFFER_OUT:     bit       = 0,
  parameter USE_RESET:      bit       = 0,
  parameter INITIAL_VALUE:  DATA_TYPE = 0 as DATA_TYPE
)(
  i_clk:    input   logic,
  i_rst_n:  input   logic,
  i_clr:    input   logic,
  i_mea:    input   logic,
  i_wea:    input   logic,
  i_adra:   input   logic<ADDRESS_WIDTH>,
  i_da:     input   DATA_TYPE,
  i_meb:    input   logic,
  i_adrb:   input   logic<ADDRESS_WIDTH>,
  o_dq:     output  DATA_TYPE
) {
  var ram:  logic<$bits(DATA_WIDTH)>[WORD_SIZE];
  var q:    logic<$bits(DATA_WIDTH)>;

  if USE_RESET :g_ram {
    always_ff (i_clk, i_rst_n) {
      if_reset {
        for i: u32 in 0..WORD_SIZE {
          ram[i]  = INITIAL_VALUE;
        }
      } else if i_clr {
        for i: u32 in 0..WORD_SIZE {
          ram[i]  = INITIAL_VALUE;
        }
      } else if i_mea && i_wea {
        ram[i_adra] = i_da;
      }
    }
  } else {
    always_ff (i_clk) {
      if i_mea && i_wea {
        ram[i_adra] = i_da;
      }
    }
  }

  always_comb {
    o_dq  = q;
  }

  if !BUFFER_OUT :g_out {
    always_comb {
      q = ram[i_adrb];
    }
  }
  else if USE_RESET {
    always_ff (i_clk, i_rst_n) {
      if_reset {
        q = INITIAL_VALUE;
      } else if i_clr {
        q = INITIAL_VALUE;
      } else if i_meb {
        q = ram[i_adrb];
      }
    }
  }
  else {
    always_ff (i_clk) {
      if i_meb {
        q = ram[i_adrb];
      }
    }
  }
}
